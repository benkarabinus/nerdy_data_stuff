knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(HistData)
data("Guerry")
dat<-Guerry
dat.c<-filter(dat,Region=="C")
(g<-ggplot(data=dat.c,aes(x=Commerce,y=Wealth))+geom_point())
w<-dat.c$Wealth
c<-dat.c$Commerce
n<-nrow(dat.c)
(m<-(sum(c*w)/n-mean(c)*mean(w))/
(sum((c)^2)/n-mean(c)^2))
(b<-mean(w)-m*mean(c))
(g+geom_abline(slope=m, intercept=b))
?glmnet
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glmnet)
?glmnet
# Load any packages, if any, that you use as part of your answers here
# For example:
library(mlbench)
library(glmnet)
data(BostonHousing) # loads the BostonHousing dataset into memory from the mlbench package
str(BostonHousing)
# create the matrix of explanatory variables
X<-as.matrix(dplyr::select(BostonHousing, -medv))
# create the vector of outcomes
Y<-BostonHousing$medv
View(X)
Y
# create coss validated ridge regression model (alpha = 0 for ridge)
cvfit.house.ridge <- cvfit = cv.glmnet(x=X, y=Y,alpha=0)
which(X == is.na())
which(is.na(X))
# Load any packages, if any, that you use as part of your answers here
# For example:
library(mlbench)
library(glmnet)
# load the Boston housing data
data(BostonHousing) # loads the BostonHousing dataset into memory from the mlbench package
# verify variable types
str(BostonHousing)
# create the matrix of explanatory variables
X<-as.matrix(dplyr::select(BostonHousing, -medv))
View(X)
View(X)
View(X)
# create the vector of outcomes
Y<-BostonHousing$medv
# Your code to conduct cross-validated ridge regression
# set seed for reproducability
set.seed(1000)
# create coss validated ridge regression model (alpha = 0 for ridge)
cvfit.house.ridge <- cvfit = cv.glmnet(x=X, y=Y,alpha=0)
typeof(X)
# create the matrix of explanatory variables
X<-data.matrix(dplyr::select(BostonHousing, -medv))
typeof(X)
# create the vector of outcomes
Y<-BostonHousing$medv
# Your code to conduct cross-validated ridge regression
# set seed for reproducability
set.seed(1000)
# create coss validated ridge regression model (alpha = 0 for ridge)
cvfit.house.ridge <- cvfit = cv.glmnet(x=X, y=Y,alpha=0)
# Load any packages, if any, that you use as part of your answers here
# For example:
library(mlbench)
library(glmnet)
# load the Boston housing data
data(BostonHousing) # loads the BostonHousing dataset into memory from the mlbench package
# verify variable types
str(BostonHousing)
# create the matrix of explanatory variables
X<-as.matrix(dplyr::select(BostonHousing, -medv))
typeof(X)
# create the vector of outcomes
Y<-BostonHousing$medv
# Your code to conduct cross-validated ridge regression
# set seed for reproducability
set.seed(1000)
# create cross validated ridge regression model (alpha = 0 for ridge)
cvfit.house.ridge <- cv.glmnet(x=X, y=Y,alpha=0)
# create the matrix of explanatory variables
X<-data.matrix(dplyr::select(BostonHousing, -medv))
typeof(X)
# create the vector of outcomes
Y<-BostonHousing$medv
# Your code to conduct cross-validated ridge regression
# set seed for reproducability
set.seed(1000)
# create cross validated ridge regression model (alpha = 0 for ridge)
cvfit.house.ridge <- cv.glmnet(x=X, y=Y,alpha=0)
plot(cvfit.house.ridge)
# lambda for for the model with the lowest error
cvfit.house.ridge$lambda.min
# coefficients the model with the lowest error
coef(cvfit.house.ridge, s = "lambda.min")
View(cvfit.house.ridge)
# print lambda with the lowest MSE
cvfit.house.ridge$lambda.1se
# print coefficients computed for lambda.lse
coef(cvfit.house.ridge, s = "lambda.1se")
setwd("~/OneDrive - University of Denver/COMP4442/ProblemSetsWorkingDirectory/Week7")
# Load any packages, if any, that you use as part of your answers here
# For example:
library(mlbench)
library(glmnet)
# load the Boston housing data
data(BostonHousing) # loads the BostonHousing dataset into memory from the mlbench package
# verify variable types
str(BostonHousing)
# create the matrix of explanatory variables
X <- model.matrix(medv ~., data=BostonHousing)
# drop the intercept column
X <- X[,-1]
View(X)
# create the vector of outcomes
Y<-BostonHousing$medv
# set seed for reproducability
set.seed(1000)
# create cross validated ridge regression model (alpha = 0 for ridge)
cvfit.house.ridge <- cv.glmnet(x=X, y=Y,alpha=0)
# print the smallest lambda for the fitted model
cvfit.house.ridge$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.house.ridge, s = "lambda.min")
# print lambda with the lowest MSE
cvfit.house.ridge$lambda.1se
# print coefficients computed for lambda.lse
coef(cvfit.house.ridge, s = "lambda.1se")
# create the matrix of explanatory variables
X<-model.matrix(medv~., data=BostonHousing)
# drop the intercept column
X <- X[,-1]
# create the vector of outcomes
Y<-BostonHousing$medv
# set seed for reproducability
set.seed(1000)
# create lasso regression model using k- fold cross validation
cvfit.house.lasso <- cv.glmnet(x=X, y=Y, alpha=1)
# print the smallest lambda for the fitted model
cvfit.house.lasso$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.house.lasso, s = "lambda.min")
# print the lambda with smallest MSE
cvfit.house.lasso$lambda.1se
# print coefficients associated with lambda.1se
coef(cvfit.house.lasso, s = "lambda.1se")
contraception <- read.csv("contra.csv", header=TRUE, sep=",")
# re-code the contra variable
contraception$contra_use <- ifelse(contraception$contra == 1, 0, 1)
# sanity check re-coding
table(contraception$contra)
table(contraception$contra_use)
# change categorical variables to type factor
contraception$w.edu <- as.factor(contraception$w.edu)
contraception$h.edu <- as.factor(contraception$h.edu)
contraception$w.relig <- as.factor(contraception$w.relig)
contraception$w.work <- as.factor(contraception$w.work)
contraception$h.occ <- as.factor(contraception$h.occ)
contraception$sol.index <- as.factor(contraception$sol.index)
contraception$media <- as.factor(contraception$media)
contraception$contra_use <- as.factor(contraception$contra_use)
# check data structure
str(contraception)
# drop contra predictor
contra.dat <- contraception[,-10]
# create the matrix of explanatory variables
X <- model.matrix(contra_use ~., data=contra.dat)
View(contra.dat)
# drop the intercept column
X <- X[,-1]
# create the vector of outcomes
Y <- contra.dat$contra_use
# set seed for reproducability
set.seed(1000)
# create ridge regression model (alpha = 0, family = binomial)
cvfit.contra.ridge <- cv.glmnet(x=X, y=Y,alpha=0, family = 'binomial')
# print the smallest lambda for the fitted model
cvfit.contra.ridge$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.contra.ridge, s = "lambda.min")
# print the smallest lambda for the fitted model
cvfit.contra.ridge$lambda.1se
# print coefficients associated with smallest lambda
coef(cvfit.contra.ridge, s = "lambda.1se")
# drop contra predictor
contra.dat <- contraception[,-10]
# create the matrix of explanatory variables
X <- model.matrix(contra_use ~., data=contra.dat)
# drop the intercept column
X <- X[,-1]
# create the vector of outcomes
Y <- contra.dat$contra_use
# set seed for reproducibality
set.seed(1000)
# create lasso regression model (alpha = 1, family = binomial)
cvfit.contra.lasso <- cv.glmnet(x=X, y=Y,alpha=1, family = 'binomial')
# print the smallest lambda for the fitted model
cvfit.contra.lasso$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.contra.lasso, s = "lambda.min")
# print the smallest lambda for the fitted model
cvfit.contra.lasso$lambda.1se
# print coefficients associated with smallest lambda
coef(cvfit.contra.lasso, s = "lambda.1se")
# Install and load the rstudioapi package
# install.packages("rstudioapi")
library(rstudioapi)
R.Version() # base function that outputs current R version
versionInfo() # rstudioapi function that outputs current RStudio version
packageVersion("glmnet") # base function that outputs current package version
# Load any packages, if any, that you use as part of your answers here
# For example:
library(mlbench)
library(glmnet)
# load the Boston housing data
data(BostonHousing) # loads the BostonHousing dataset into memory from the mlbench package
# verify variable types
str(BostonHousing)
# create the matrix of explanatory variables
X <- model.matrix(medv ~., data=BostonHousing)
# drop the intercept column
X <- X[,-1]
# create the vector of outcomes
Y<-BostonHousing$medv
# set seed for reproducability
set.seed(1000)
# create cross validated ridge regression model (alpha = 0 for ridge)
cvfit.house.ridge <- cv.glmnet(x=X, y=Y,alpha=0)
# print the smallest lambda for the fitted model
cvfit.house.ridge$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.house.ridge, s = "lambda.min")
# print lambda with the lowest MSE
cvfit.house.ridge$lambda.1se
# print coefficients computed for lambda.lse
coef(cvfit.house.ridge, s = "lambda.1se")
# create the matrix of explanatory variables
X<-model.matrix(medv~., data=BostonHousing)
# drop the intercept column
X <- X[,-1]
# create the vector of outcomes
Y<-BostonHousing$medv
# set seed for reproducability
set.seed(1000)
# create lasso regression model using k- fold cross validation
cvfit.house.lasso <- cv.glmnet(x=X, y=Y, alpha=1)
# print the smallest lambda for the fitted model
cvfit.house.lasso$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.house.lasso, s = "lambda.min")
# print the lambda with smallest MSE
cvfit.house.lasso$lambda.1se
# print coefficients associated with lambda.1se
coef(cvfit.house.lasso, s = "lambda.1se")
contraception <- read.csv("contra.csv", header=TRUE, sep=",")
# re-code the contra variable
contraception$contra_use <- ifelse(contraception$contra == 1, 0, 1)
# sanity check re-coding
table(contraception$contra)
table(contraception$contra_use)
# change categorical variables to type factor
contraception$w.edu <- as.factor(contraception$w.edu)
contraception$h.edu <- as.factor(contraception$h.edu)
contraception$w.relig <- as.factor(contraception$w.relig)
contraception$w.work <- as.factor(contraception$w.work)
contraception$h.occ <- as.factor(contraception$h.occ)
contraception$sol.index <- as.factor(contraception$sol.index)
contraception$media <- as.factor(contraception$media)
contraception$contra_use <- as.factor(contraception$contra_use)
# check data structure
str(contraception)
# drop contra predictor
contra.dat <- contraception[,-10]
# create the matrix of explanatory variables
X <- model.matrix(contra_use ~., data=contra.dat)
# drop the intercept column
X <- X[,-1]
# create the vector of outcomes
Y <- contra.dat$contra_use
# set seed for reproducability
set.seed(1000)
# create ridge regression model (alpha = 0, family = binomial)
cvfit.contra.ridge <- cv.glmnet(x=X, y=Y,alpha=0, family = 'binomial')
# print the smallest lambda for the fitted model
cvfit.contra.ridge$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.contra.ridge, s = "lambda.min")
# print the smallest lambda for the fitted model
cvfit.contra.ridge$lambda.1se
# print coefficients associated with smallest lambda
coef(cvfit.contra.ridge, s = "lambda.1se")
# drop contra predictor
contra.dat <- contraception[,-10]
# create the matrix of explanatory variables
X <- model.matrix(contra_use ~., data=contra.dat)
# drop the intercept column
X <- X[,-1]
# create the vector of outcomes
Y <- contra.dat$contra_use
# set seed for reproducibality
set.seed(1000)
# create lasso regression model (alpha = 1, family = binomial)
cvfit.contra.lasso <- cv.glmnet(x=X, y=Y,alpha=1, family = 'binomial')
# print the smallest lambda for the fitted model
cvfit.contra.lasso$lambda.min
# print coefficients associated with smallest lambda
coef(cvfit.contra.lasso, s = "lambda.min")
# print the smallest lambda for the fitted model
cvfit.contra.lasso$lambda.1se
# print coefficients associated with smallest lambda
coef(cvfit.contra.lasso, s = "lambda.1se")
# Install and load the rstudioapi package
# install.packages("rstudioapi")
library(rstudioapi)
R.Version() # base function that outputs current R version
versionInfo() # rstudioapi function that outputs current RStudio version
packageVersion("glmnet") # base function that outputs current package version
