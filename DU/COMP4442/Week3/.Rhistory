knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(HistData)
data("Guerry")
dat<-Guerry
dat.c<-filter(dat,Region=="C")
(g<-ggplot(data=dat.c,aes(x=Commerce,y=Wealth))+geom_point())
w<-dat.c$Wealth
c<-dat.c$Commerce
n<-nrow(dat.c)
(m<-(sum(c*w)/n-mean(c)*mean(w))/
(sum((c)^2)/n-mean(c)^2))
(b<-mean(w)-m*mean(c))
(g+geom_abline(slope=m, intercept=b))
setwd("~/OneDrive - University of Denver/COMP4442/ProblemSetsWorkingDirectory/Week3")
# Load any packages, if any, that you use as part of your answers here
# For example:
library(MASS)
library(dplyr)
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# Show how you obtained your answer here.
predict(d_model, d_predict)
# Load any packages, if any, that you use as part of your answers here
# For example:
library(MASS)
library(dplyr)
doughnuts.factorial <- read.csv("doughnutsfactorial.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# create factors for fat_type and flour_type
doughnuts.factorial$fat_type_factor <- as.factor(doughnuts.factorial$fat_type)
doughnuts.factorial$flour_type_factor <- as.factor(doughnuts.factorial$flour_type)
# check the data set structure
str(doughnuts.factorial)
# additional check of sim_tot_fat variable
class(doughnuts.factorial$sim_tot_fat)
# change sim_tot_fat to numeric data type
doughnuts.factorial$sim_tot_fat <- as.numeric(doughnuts.factorial$sim_tot_fat)
# ensure changes
str(doughnuts.factorial)
doughnuts.reg = lm(sim_tot_fat ~ fat_type_factor, data=doughnuts.factorial) # You may need to change the variable names depending on how you named the variables in Question 1
summary(doughnuts.reg)
# Your two-way ANOVA code from Problem Set 2, Question 5 copied and pasted here.
# create two-way ANOVA with interaction term
fat_flour_int.aov<-aov(sim_tot_fat~fat_type_factor*flour_type_factor,
data=doughnuts.factorial)
# ANOVA Summary
summary(fat_flour_int.aov)
# Your code for an equivalently-specified regression model.
# create the regression model using lm()
d_model <- lm(sim_tot_fat~fat_type_factor*flour_type_factor,
data = doughnuts.factorial)
# Don't forget to display the results with the summary() function!
# print model summary
summary(d_model)
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# Show how you obtained your answer here.
predict(d_model, d_predict)
fish <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# transform categorical variables
fish$fishpart_factor <- as.factor(fish$fishpart)
#fish$fisherman <- as.factor(fish$fisherman)
# check the structure of the dataset
str(fish)
# create the regression model
TotHg.reg <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish)
# print model summary
summary(TotHg.reg)
# print regression diagnostic plots (TotHg)
plot(TotHg.reg)
# remove observation 85
fish.remove <- fish[-c(85),]
# create the new linear model
fish.reg.remove <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish.remove)
# print the model summary
summary(fish.reg.remove)
# print diagnostic plots (fish.reg.remove)
plot(fish.reg.remove)
fish.demo <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",")  # You may need to change the file path on this line
fish.demo$fishpart_factor <- as.factor(fish$fishpart)
fish.reg.demo = lm(TotHg ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
summary(fish.reg.demo)
plot(fish.reg.demo)
lambda<-boxcox(fish.reg.demo)
lambda
ll.best<-which(lambda[[2]]==max(lambda[[2]]))
ll.best
lambda.best<-lambda[[1]][ll.best]
lambda.best
# Your code for creating and saving the transformed outcome variable
fish.demo$TotHg.BC <- (fish.demo$TotHg^lambda.best-1)/(lambda.best)
# fit the new regression model following box-cox transformation
fish.reg.BC <- lm(TotHg.BC ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
# print the model summary
summary(fish.reg.BC)
plot(fish.reg.demo) # Original model diagnostic plots
# Display your  diagnostic plots for the transformed model here. Make sure they are visible in the knitted document
plot(fish.reg.BC)
View(fish)
lambda<-boxcox(fish.reg.demo)
lambda
setwd("~/OneDrive - University of Denver/COMP4442/ProblemSetsWorkingDirectory/Week3")
# Load any packages, if any, that you use as part of your answers here
# For example:
library(MASS)
library(dplyr)
doughnuts.factorial <- read.csv("doughnutsfactorial.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# create factors for fat_type and flour_type
doughnuts.factorial$fat_type_factor <- as.factor(doughnuts.factorial$fat_type)
doughnuts.factorial$flour_type_factor <- as.factor(doughnuts.factorial$flour_type)
# check the data set structure
str(doughnuts.factorial)
# additional check of sim_tot_fat variable
class(doughnuts.factorial$sim_tot_fat)
# change sim_tot_fat to numeric data type
doughnuts.factorial$sim_tot_fat <- as.numeric(doughnuts.factorial$sim_tot_fat)
# ensure changes
str(doughnuts.factorial)
doughnuts.reg = lm(sim_tot_fat ~ fat_type_factor, data=doughnuts.factorial) # You may need to change the variable names depending on how you named the variables in Question 1
summary(doughnuts.reg)
# Your two-way ANOVA code from Problem Set 2, Question 5 copied and pasted here.
# create two-way ANOVA with interaction term
fat_flour_int.aov<-aov(sim_tot_fat~fat_type_factor*flour_type_factor,
data=doughnuts.factorial)
# ANOVA Summary
summary(fat_flour_int.aov)
# Your code for an equivalently-specified regression model.
# create the regression model using lm()
d_model <- lm(sim_tot_fat~fat_type_factor*flour_type_factor,
data = doughnuts.factorial)
# Don't forget to display the results with the summary() function!
# print model summary
summary(d_model)
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# Show how you obtained your answer here.
predict(d_model, d_predict)
fish <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# transform categorical variables
fish$fishpart_factor <- as.factor(fish$fishpart)
#fish$fisherman <- as.factor(fish$fisherman)
# check the structure of the dataset
str(fish)
# create the regression model
TotHg.reg <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish)
# print model summary
summary(TotHg.reg)
# print regression diagnostic plots (TotHg)
plot(TotHg.reg)
# remove observation 85
fish.remove <- fish[-c(85),]
# create the new linear model
fish.reg.remove <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish.remove)
# print the model summary
summary(fish.reg.remove)
# print diagnostic plots (fish.reg.remove)
plot(fish.reg.remove)
fish.demo <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",")  # You may need to change the file path on this line
fish.demo$fishpart_factor <- as.factor(fish$fishpart)
fish.reg.demo = lm(TotHg ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
summary(fish.reg.demo)
plot(fish.reg.demo)
lambda<-boxcox(fish.reg.demo)
lambda
ll.best<-which(lambda[[2]]==max(lambda[[2]]))
ll.best
lambda.best<-lambda[[1]][ll.best]
lambda.best
# Your code for creating and saving the transformed outcome variable
fish.demo$TotHg.BC <- (fish.demo$TotHg^lambda.best-1)/(lambda.best)
# fit the new regression model following box-cox transformation
fish.reg.BC <- lm(TotHg.BC ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
# print the model summary
summary(fish.reg.BC)
plot(fish.reg.demo) # Original model diagnostic plots
# Display your  diagnostic plots for the transformed model here. Make sure they are visible in the knitted document
plot(fish.reg.BC)
# Load any packages, if any, that you use as part of your answers here
# For example:
library(MASS)
library(dplyr)
doughnuts.factorial <- read.csv("doughnutsfactorial.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# create factors for fat_type and flour_type
doughnuts.factorial$fat_type_factor <- as.factor(doughnuts.factorial$fat_type)
doughnuts.factorial$flour_type_factor <- as.factor(doughnuts.factorial$flour_type)
# check the data set structure
str(doughnuts.factorial)
# additional check of sim_tot_fat variable
class(doughnuts.factorial$sim_tot_fat)
# change sim_tot_fat to numeric data type
doughnuts.factorial$sim_tot_fat <- as.numeric(doughnuts.factorial$sim_tot_fat)
# ensure changes
str(doughnuts.factorial)
doughnuts.reg = lm(sim_tot_fat ~ fat_type_factor, data=doughnuts.factorial) # You may need to change the variable names depending on how you named the variables in Question 1
summary(doughnuts.reg)
# Your two-way ANOVA code from Problem Set 2, Question 5 copied and pasted here.
# create two-way ANOVA with interaction term
fat_flour_int.aov<-aov(sim_tot_fat~fat_type_factor*flour_type_factor,
data=doughnuts.factorial)
# ANOVA Summary
summary(fat_flour_int.aov)
# create two-way ANOVA with interaction term
fat_flour_int.aov<-aov(sim_tot_fat~fat_type_factor*flour_type_factor,
data=doughnuts.factorial)
# ANOVA Summary
summary(fat_flour_int.aov)
# create the regression model using lm()
d_model <- lm(sim_tot_fat~fat_type_factor*flour_type_factor,
data = doughnuts.factorial)
# print model summary
summary(d_model)
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# Show how you obtained your answer here.
predict(d_model, d_predict)
# create doughnut
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# predict sim_tot_fat
predict(d_model, d_predict)
# Read in data
fish <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# transform categorical variables
fish$fishpart_factor <- as.factor(fish$fishpart)
#fish$fisherman <- as.factor(fish$fisherman)
# Read in data
fish <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# transform categorical variables
fish$fishpart_factor <- as.factor(fish$fishpart)
#fish$fisherman <- as.factor(fish$fisherman)
# check the structure of the dataset
str(fish)
# create the regression model
TotHg.reg <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish)
# print model summary
summary(TotHg.reg)
# print regression diagnostic plots (TotHg)
plot(TotHg.reg)
# remove observation 85
fish.remove <- fish[-c(85),]
# create the new linear model
fish.reg.remove <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish.remove)
# print the model summary
summary(fish.reg.remove)
# print diagnostic plots (fish.reg.remove)
plot(fish.reg.remove)
#perform BoxCox
lambda<-boxcox(fish.reg.demo)
#print lambda
lambda
ll.best<-which(lambda[[2]]==max(lambda[[2]]))
ll.best
lambda.best<-lambda[[1]][ll.best]
lambda.best
# BoxCox transformation on the outcome variable
fish.demo$TotHg.BC <- (fish.demo$TotHg^lambda.best-1)/(lambda.best)
# fit the new regression model following box-cox transformation
fish.reg.BC <- lm(TotHg.BC ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
# print the model summary
summary(fish.reg.BC)
plot(fish.reg.demo) # Original model diagnostic plots
plot(fish.reg.demo) # Original model diagnostic plots
# Diagnostic plot's for the transformed model
plot(fish.reg.BC)
# Load any packages, if any, that you use as part of your answers here
# For example:
library(MASS)
library(dplyr)
doughnuts.factorial <- read.csv("doughnutsfactorial.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# create factors for fat_type and flour_type
doughnuts.factorial$fat_type_factor <- as.factor(doughnuts.factorial$fat_type)
doughnuts.factorial$flour_type_factor <- as.factor(doughnuts.factorial$flour_type)
# check the data set structure
str(doughnuts.factorial)
# additional check of sim_tot_fat variable
class(doughnuts.factorial$sim_tot_fat)
# change sim_tot_fat to numeric data type
doughnuts.factorial$sim_tot_fat <- as.numeric(doughnuts.factorial$sim_tot_fat)
# ensure changes
str(doughnuts.factorial)
doughnuts.reg = lm(sim_tot_fat ~ fat_type_factor, data=doughnuts.factorial) # You may need to change the variable names depending on how you named the variables in Question 1
summary(doughnuts.reg)
# create two-way ANOVA with interaction term
fat_flour_int.aov<-aov(sim_tot_fat~fat_type_factor*flour_type_factor,
data=doughnuts.factorial)
# ANOVA Summary
summary(fat_flour_int.aov)
# create the regression model using lm()
d_model <- lm(sim_tot_fat~fat_type_factor*flour_type_factor,
data = doughnuts.factorial)
# print model summary
summary(d_model)
# create doughnut
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# predict sim_tot_fat
predict(d_model, d_predict)
# Read in data
fish <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# transform categorical variables
fish$fishpart_factor <- as.factor(fish$fishpart)
#fish$fisherman <- as.factor(fish$fisherman)
# check the structure of the dataset
str(fish)
# create the regression model
TotHg.reg <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish)
# print model summary
summary(TotHg.reg)
# print regression diagnostic plots (TotHg)
plot(TotHg.reg)
# remove observation 85
fish.remove <- fish[-c(85),]
# create the new linear model
fish.reg.remove <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish.remove)
# print the model summary
summary(fish.reg.remove)
# print diagnostic plots (fish.reg.remove)
plot(fish.reg.remove)
fish.demo <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",")  # You may need to change the file path on this line
fish.demo$fishpart_factor <- as.factor(fish$fishpart)
fish.reg.demo = lm(TotHg ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
summary(fish.reg.demo)
plot(fish.reg.demo)
#perform BoxCox
lambda<-boxcox(fish.reg.demo)
#print lambda
lambda
ll.best<-which(lambda[[2]]==max(lambda[[2]]))
ll.best
lambda.best<-lambda[[1]][ll.best]
lambda.best
# BoxCox transformation on the outcome variable
fish.demo$TotHg.BC <- (fish.demo$TotHg^lambda.best-1)/(lambda.best)
# fit the new regression model following box-cox transformation
fish.reg.BC <- lm(TotHg.BC ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
# print the model summary
summary(fish.reg.BC)
plot(fish.reg.demo) # Original model diagnostic plots
# Diagnostic plot's for the transformed model
plot(fish.reg.BC)
# Load any packages, if any, that you use as part of your answers here
# For example:
library(MASS)
library(dplyr)
doughnuts.factorial <- read.csv("doughnutsfactorial.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# create factors for fat_type and flour_type
doughnuts.factorial$fat_type_factor <- as.factor(doughnuts.factorial$fat_type)
doughnuts.factorial$flour_type_factor <- as.factor(doughnuts.factorial$flour_type)
# check the data set structure
str(doughnuts.factorial)
# additional check of sim_tot_fat variable
class(doughnuts.factorial$sim_tot_fat)
# change sim_tot_fat to numeric data type
doughnuts.factorial$sim_tot_fat <- as.numeric(doughnuts.factorial$sim_tot_fat)
# ensure changes
str(doughnuts.factorial)
doughnuts.reg = lm(sim_tot_fat ~ fat_type_factor, data=doughnuts.factorial) # You may need to change the variable names depending on how you named the variables in Question 1
summary(doughnuts.reg)
# create two-way ANOVA with interaction term
fat_flour_int.aov<-aov(sim_tot_fat~fat_type_factor*flour_type_factor,
data=doughnuts.factorial)
# ANOVA Summary
summary(fat_flour_int.aov)
# create the regression model using lm()
d_model <- lm(sim_tot_fat~fat_type_factor*flour_type_factor,
data = doughnuts.factorial)
# print model summary
summary(d_model)
# create doughnut
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# predict sim_tot_fat
predict(d_model, d_predict)
# Read in data
fish <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# transform categorical variables
fish$fishpart_factor <- as.factor(fish$fishpart)
#fish$fisherman <- as.factor(fish$fisherman)
# check the structure of the dataset
str(fish)
# create the regression model
TotHg.reg <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish)
# print model summary
summary(TotHg.reg)
# print regression diagnostic plots (TotHg)
plot(TotHg.reg)
# remove observation 85
fish.remove <- fish[-c(85),]
# create the new linear model
fish.reg.remove <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish.remove)
# print the model summary
summary(fish.reg.remove)
# print diagnostic plots (fish.reg.remove)
plot(fish.reg.remove)
fish.demo <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",")  # You may need to change the file path on this line
fish.demo$fishpart_factor <- as.factor(fish$fishpart)
fish.reg.demo = lm(TotHg ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
summary(fish.reg.demo)
plot(fish.reg.demo)
#perform BoxCox
lambda<-boxcox(fish.reg.demo)
#print lambda
lambda
ll.best<-which(lambda[[2]]==max(lambda[[2]]))
ll.best
lambda.best<-lambda[[1]][ll.best]
lambda.best
# BoxCox transformation on the outcome variable
fish.demo$TotHg.BC <- (fish.demo$TotHg^lambda.best-1)/(lambda.best)
# fit the new regression model following box-cox transformation
fish.reg.BC <- lm(TotHg.BC ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
# print the model summary
summary(fish.reg.BC)
plot(fish.reg.demo) # Original model diagnostic plots
# Diagnostic plot's for the transformed model
plot(fish.reg.BC)
unlink("Problem Set 3, Fall 2021_Karabinus_Ben_cache", recursive = TRUE)
# Load any packages, if any, that you use as part of your answers here
# For example:
library(MASS)
library(dplyr)
doughnuts.factorial <- read.csv("doughnutsfactorial.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# create factors for fat_type and flour_type
doughnuts.factorial$fat_type_factor <- as.factor(doughnuts.factorial$fat_type)
doughnuts.factorial$flour_type_factor <- as.factor(doughnuts.factorial$flour_type)
# check the data set structure
str(doughnuts.factorial)
# additional check of sim_tot_fat variable
class(doughnuts.factorial$sim_tot_fat)
# change sim_tot_fat to numeric data type
doughnuts.factorial$sim_tot_fat <- as.numeric(doughnuts.factorial$sim_tot_fat)
# ensure changes
str(doughnuts.factorial)
doughnuts.reg = lm(sim_tot_fat ~ fat_type_factor, data=doughnuts.factorial) # You may need to change the variable names depending on how you named the variables in Question 1
summary(doughnuts.reg)
# create two-way ANOVA with interaction term
fat_flour_int.aov<-aov(sim_tot_fat~fat_type_factor*flour_type_factor,
data=doughnuts.factorial)
# ANOVA Summary
summary(fat_flour_int.aov)
# create the regression model using lm()
d_model <- lm(sim_tot_fat~fat_type_factor*flour_type_factor,
data = doughnuts.factorial)
# print model summary
summary(d_model)
# create doughnut
d_predict <- data.frame(fat_type_factor = "Sunflower", flour_type_factor = "gf")
# predict sim_tot_fat
predict(d_model, d_predict)
# Read in data
fish <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",") # Loads the CSV file into memory. You may need to adapt this line to work on your computer
# transform categorical variables
fish$fishpart_factor <- as.factor(fish$fishpart)
#fish$fisherman <- as.factor(fish$fisherman)
# check the structure of the dataset
str(fish)
# create the regression model
TotHg.reg <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish)
# print model summary
summary(TotHg.reg)
# print regression diagnostic plots (TotHg)
plot(TotHg.reg)
# remove observation 85
fish.remove <- fish[-c(85),]
# create the new linear model
fish.reg.remove <- lm(TotHg ~ fishmlwk + weight + fishpart_factor, data = fish.remove)
# print the model summary
summary(fish.reg.remove)
# print diagnostic plots (fish.reg.remove)
plot(fish.reg.remove)
fish.demo <- read.csv("fishermen_mercury.csv", header=TRUE, sep=",")  # You may need to change the file path on this line
fish.demo$fishpart_factor <- as.factor(fish$fishpart)
fish.reg.demo = lm(TotHg ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
summary(fish.reg.demo)
plot(fish.reg.demo)
#perform BoxCox
lambda<-boxcox(fish.reg.demo)
#print lambda
lambda
ll.best<-which(lambda[[2]]==max(lambda[[2]]))
ll.best
lambda.best<-lambda[[1]][ll.best]
lambda.best
# BoxCox transformation on the outcome variable
fish.demo$TotHg.BC <- (fish.demo$TotHg^lambda.best-1)/(lambda.best)
# fit the new regression model following box-cox transformation
fish.reg.BC <- lm(TotHg.BC ~ fishmlwk + weight + fishpart_factor + age + height, data=fish.demo)
# print the model summary
summary(fish.reg.BC)
plot(fish.reg.demo) # Original model diagnostic plots
# Diagnostic plot's for the transformed model
plot(fish.reg.BC)
